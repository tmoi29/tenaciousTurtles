tenaciousTurtles - moiT, ionkinaK, LiuL, SenK

      ___
 ,,  // \\
(_,\/ \_/ \
  \ \_/_\_/>
  /_/  /_/
 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/

=======================================================
moiT -- 2017-12-14 13:14
-----------------------
Filled out team registration form

=======================================================
moiT, ionkinaK, liuL, senK -- 2017-12-15 13:00
-----------------------
Discussed project idea:

WELP
- APIs: Zomato (restaurants, address)
- Freegeoip or JS for finding customer location
- If we have time, integrate autrocomplete search from Nutritionix

=======================================================
moiT, ionkinaK, liuL, senK -- 2017-12-18 12:57

Worked on presentation and split up talking points

=======================================================
ionkinaK, liuL -- 2017-12-19 13:03

Presented design pitch
Feedback:
- Checkup on validity of FreeGeoIP
- Try Google Maps?

=======================================================
moiT, ionkinaK, liuL, senK -- 2017-12-20 13:06

Refined location finding
- Use JS to find zipcode if the user has GPS
- If not, use Freegeoip to get the IP address to get zipcode
- If the IP address is inaccurate, use user input

=======================================================
moiT, liuL -- 2017-12-21 13:12

Worked on the component map and integrated AJAX

=======================================================
ionkinaK, senK -- 2017-12-21 13:12

Worked on the site map and design doc

=======================================================
ionkinaK -- 2017-12-25 23:17

-Created app.py and layout.html
-Worked on navbar

=======================================================
ionkinaK -- 2017-12-26 2:32

-Finished layout.html
-Added logo to navbar
-Worked on login and create account pages

=======================================================
ionkinaK -- 2017-12-26 22:29

-Improved index.html by adding an image slider and 
changing the logo

=======================================================
moiT -- 2018-01-02 13:15

-Added freegeoip.py
-Can look up user's zip code

=======================================================
ionkinaK -- 2018-01-02 21:01

-Adjust text form on index.html (user can now type
over the image)
-Added text to each carousel slide
-Updated images

=======================================================
liuY -- 2018-01-03 13:17

-Work on database
  -accounts table completed
  -reviews table now accepts new reviews

=======================================================
moiT -- 2018-01-03 13:20

-Found tags to scrape from for zomato suggested restaurants

=======================================================
ionkinaK -- 2018-01-03 13:21

-Added js function to prevent carousel from moving
when the user is typing.

=======================================================
moiT -- 2018-01-03 15:58

-Added hashed passwords
-Fixed authenticate() and create_account() to flash errors and redirect pages
-Fixed login and create account forms
-Added logout function in app.py
-Added sessions
-Moved database and cleaned up repo

=======================================================
liuY -- 2018-01-04 15:50

-Finished functions regarding adding and getting reviews
-Added docstrings to functions whose usage is not apparent by signature

=======================================================
ionkinaK -- 2018-01-04 20:09

-Added responsive panels that will contain recommended
restaurants in the user's city.

=======================================================
khyberS -- 2018-01-05 02:47:52

Wrote most of the front-end JS to load restaurants
    from Zomato,
        incl. their reviews and ratings,
        using CORS-enabled AJAX calls for lower latency
        (no page refresh or double AJAX call,
        server to API and server to browser).
    It can use either GPS if hardware-permitting and user-allowed,
        zipcode if use enters it,
        or IP address as a default.
    It makes heavy use of Promises to handle asynchronous AJAX calls.
    It exports a Promise<{latitude, longitude}> getLocation() function,
        which returns a Promise of the current location,
        using GPS is able, allowed, and not explicitly disabled
            (using getLocation.dontUseGps()).
        or using the IP address,
            which uses FreeGeoIP,
            which willl always work if connected to the Internet.
    It exports a newRestaurants() constructor,
        which makes a "Restaurants" object,
        which contains the method:
            Promise<RestaurantL3> next(),
                which returns a Promise to the next RestaurantL3
                    (as specified by the Zomato API)
                sorted by distance
                and using the current location and a set radius
                until all the restaurants are exhausted,
                in which case the radius is increased
                and a new search API call is made to Zomato.
        and the method:
            Promise<bool> addNextTo(
                    HTMLElement parent,
                    BiConsumer<HTMLDivElement, RestaurantL3> restaurantToDiv),
                which appends a new HTMLDivElement to parent
                and fills that new div element using
                the next() restaurant
                and the supplied restaurantToDiv function.
    It's not completely tested, however,
        and the element IDs for the buttons, restaurantList, and zipcode field
        are not encoded correctly yet.

=======================================================
khyberS -- 2018-01-07 18:52:47

Fixed all the bugs in my JS code for getting restaurant data.
Now all we need to do is finish the function to get latitude and longitude
    from a zipcode (see zipCodeLocation(zipCode) on line 476),
    and finish restaurantToDiv(div, restaurant) on line 505,
    so that it makes the restaurant data look nicer.

=======================================================
khyberS -- 2018-01-07 20:08:39

Cleaned up index.html and refacted CSS into welp.css and JS in welp.js.

=======================================================
khyberS -- 2018-01-07 20:18:03

Factored out CSS for other HTML files and cleaned them up a little.

=======================================================
khyberS -- 2018-01-08 00:13:36

Moved zipcode box outside of carousel to make things much simpler.
Ideally, we would have the zipcode box on top of the carousel,
but not a part of it.

Fixed welp.js so that it adds the 20 first (closest) restaurants
in a similar style to the placeholder restaurants we had before,
showing the name, rating, and picture
(a lot of restaurants don't have any picture).

There's also a More Restaurants button that
adds the next restaurant to the list/row.

=======================================================
khyberS -- 2018-01-08 11:24:57

Cleaned up app.py and used my util stuff
from previous projects to make it more secure.

=======================================================
khyberS -- 2018-01-08 15:06:54

Fixed all the DB accesses in database.py susceptible to SQL injection.

Wrapped db = sqlite3.connect() calls in with statements,
so that db.close() is always called on exceptions and returns.

=======================================================
khyberS -- 2018-01-08 15:11:21

Implemented zipCodeLocation(zipCode) in welp.js
using the Google Maps Geocoding API.

=======================================================
khyberS -- 2018-01-08 15:23:41

Changed STRING columns to TEXT in setup_db.py.

Deleted freegeoip.py since it's implemented in used in welp.js.

Added requirements.txt with dependencies that can be installed
by running pip install -r requirements.txt.

=======================================================
khyberS -- 2018-01-08 15:37:16

Refactored welp.js:

    Moved newRestaurantCol(), newRestaurantRow(), and newRestaurantList()
    to a new RestaurantListModule() that returns only newRestaurantList().

    Moved zipCodeLocation() to LocationModule(), where it's returned.

=======================================================

ionkinaK -- 2018-01-08 22:51

- Read through Khyber's JS to adapt to new changes
- Attempted to resize the images with JS
- Notes/Observations:
  * div > p selects all <p> elements where <div> is the
  parent element.
  * div + p selectes all <p> elements directly after <div>
  * Element.classList: DOMTokenList of the element's class
  attribute (uses .add() and .remove())
  * className accessor/ mutator for class
- Tried changing img const to var to make it not read only.
I thought that would make classList or className work, but
it was to no avail

lots of experimenting later, the question lingers:
  * Why doesn't img.className = "rest_img" work
  in the js fxn?
  * How can class.List.add be used in the restaurantToDiv
  fxn?

2018-01-09
Mystery solved: my cache was the culprit >:( 
Note for future: use hard refresh!


- Created a template for restaurant info pages:
information.html
  * added panel for image and information
  * to do this week: link template and restaurant info
  using js/jinja

=======================================================

khyberS -- 2018-01-09 11:12:21

Turned off sending the server coordinates for now since I don't think it's useful.

Added a method to newRestaurantList: withEventListeners(listeners),
which takes an object like {click: function(event) {}} of event listeners
to add to each restaurant element.

Added a click listener to each restaurant element that opens a new page
(currently /reviews) using window.open(url),
sends it the restaurant data by accessing its DOM,
and loads the reviews for that restaurant from Zomato once the page has loaded.

The /reviews page isn't implemented in Flask yet, so we need to do that.
The JS will also request reviews for that restaurant from our own database
that users added on our website.

Set the class of the div element in restaurantToDiv() to make sure it works.

=======================================================
ionkinaK -- 2018-01-10 09:50

-Resized panel images by adding restaurant.thumb as a
background image to the img_div div.
-Placed the form over the carousel to aesthetically 
improve the user experience 
-Improved design of panels
-to do: do something about the "" img.thumbs.

=======================================================
ionkinaK -- 2018-01-10 11:03

-Worked on using ajax to retreive images from Getty
-These images will be replacements for restaurants
that have no thumbnails
-They will be based on the cuisine
-To do: 
    * Replace hard-coded phrase parameter with
cuisines
    * Work on the callback fxn
=======================================================

khyberS -- 2018-01-10 12:39:29

Renamed information.html, etc. to restaurant_info.html, etc.

app.py now reads in the Zomato API key from api/secrets.json
and passes it to index.html,
where the template adds `const zomatoApiKey = {{zomato_api_key}}`
in a <script> so that the JS can access it without exposing
the API key in the source code.

Added the HTTP header Cache-Control: public to the Zomato requests
so that the browser can cache identical requests
beyond the lifetime of the webpage.

=======================================================
khyberS -- 2018-01-10 12:55:18

Rounded coordinates sent to Zomato to 3 decimals
to take advantage of the browser cache,
which can cache identical GET requests even from different pages.
3 decimals is still pretty accurate (to within less than a block),
but will ensure that if someone doesn't move,
the request should be cached.

=======================================================
moiT -- 2018-01-10 16:52

Added functions in database.py to allow user to add and get their 
favorited restaurants

app.py passes database reviews to the review pages

=======================================================
khyberS -- 2018-01-11 13:14:59

Fixed the Cache-Control header not allowed error.
It turns out Cache-Control: public can only be set by the server.
The client can only prevent caching.

Also, made sure that no infinite loop of request errors happens.
If there are too many errors, it stops making new requests.

Fixed restaurant_info() so that it reads query string args correctly.

Fixed <script> tag in restaurant_info.html so that it defines
zomatoApiKey, restaurantId, and welpReviews
from the server for use by JS.

Changed the executing structure of welp.js
so that welp.js is included in every template that needs JS
and the JS chooses which main function to execute
based on the current URL.

When /restaurant_info is opened from /index,
/index passes the restaurant data to it directly,
but if /restaurant_info is loaded on its own,
it reloads the restaurant data from Zomato's /restaurant API
using the restaurantId.

Both RestaurantsPageModule() and RestaurantInfoPageModule()
both return a main() method, which is run when that page is loaded.

=======================================================
khyberS -- 2018-01-11 15:35:43

Got the Getty image API to partially work.
It sets some of the images if Zomato doesn't supply them,
but a bunch still return 403 Forbidden,
and I'm not sure why.

I added the getRestaurantImgUrl(restaurant) function
above restaurantToDiv(), which returns a Promise of the imgUrl,
either restaurant.featured_image or restaurant.thumb if they exist,
or the imgUrl from Getty if they don't exist.
The restaurant.cuisines field is used for the Getty phrase.

=======================================================
khyberS -- 2018-01-11 21:05:43

Fixed login().
Before it logged in all usernames and passwords before checking them,
now it works correctly.

Fixed the Getty image search API calls to limit them to 5 per second
so that no errors are returned.

The Getty API key is also passed to the JS in the same way as the Zomato API key.
Everyone must put their key in the api/secrets.json file,
modeled after secrets_template.json.

However, Getty seems to be returning images that have nothing to do
with the search phrase, which I set (line 786 in getRestaurantImgUrl())
to restaurant.cuisine + " Food".
Maybe I'm making the request wrong, or maybe the Getty search isn't that good.

=======================================================
khyberS -- 2018-01-11 22:18:06

Added gettyApiKey definition in restaurant_info.html.

=======================================================
ionkinaK -- 2018-01-12 00:39

Improved the image positioning and behavior in the index.html 
panels, worked on the frontend of the restaurant_information pages.

=======================================================
khyberS -- 2018-01-12 06:10:18

Made the More Restaurants button at the bottom of the page bigger,
and now when you click on it and another row is added,
it scrolls down automatically.

Partially fixed the Getty API calls.
Now I'm searching correctly by the restaurant.name,
so it gets a slightly more accurate picture
and not all the same pictures.
However, some restaurants still don't have any pictures (from Getty),
and the pictures still aren't too relevant.

We should just scrape Google's image search.
It's much, much better in terms of relevance,
and often actually shows a picture of the restaurant.
However, since google.com/search is not an API
and isn't CORS enabled,
we must scrape it in Python and then have the JS
make an AJAX call to our server for it.

Fixed some mistakes in the CSS.
For the #img height and width in restaurant_info.css,
it was entered wrong (in quotes), but I actually commented it out
completely, since if there's no image, setting a size
creates a big empty box, instead of just nothing if no size is specified.

Added id="img" to the <img> element in restaurant_info.html,
so that it can be selected correctly from the JS.

Fixed restaurant.cuisine to restaurant.cuisines in addInfo(),
which I also renamed to addRestaurantInfo().

=======================================================
ionkinaK -- 2018-01-12 08:39

Fixed the image size and position in restaurant_info.cs

=======================================================s
khyberS -- 2018-01-12 08:17:59

Now the restaurants partially scroll into view once loaded,
since before the user might not have known they loaded yet
without scrolling down.

Fixed the size of the image in /restaurant_info
using JS instead of CSS,
so it only sets the size if there is an image,
meaning no large, empty box is ever shown,
but the image, when present, is never too large.

=======================================================
khyberS -- 2018-01-12 15:30:28

Fixed the geolocation and IP address location bug.
Now it successfully uses the IP address
when the GPS doesn't work or is blocked by the user.

=======================================================
khyberS -- 2018-01-12 18:36:11

Added the GET or POST /google_image_search?query= API route,
which returns a JSON array of image URLs for the query.
Google's image search is much better than Getty's,
and it has no rate limits, and Google is faster.

I haven't incorporated it into welp.js
to replace the Getty stuff yet.
I'm doing that next.

=======================================================
khyberS -- 2018-01-13 18:31:47

Changed the Google image search requests to use cors-anywhere,
a dedicated CORS server, instead of our own API route in Flask.

This is because using our own Flask server is too slow
because Flask can't do asynchronous requests,
so it has to wait for the whole Google request
before starting the next request.
By using a dedicated CORS server like cors-anywhere,
we can still make CORS requests to google.com,
which doesn't allow CORS requests,
and at the same time, still do async requests,
meaning the latency is still the same,
but the throughput is much, much higher.

I still left the Python code for this in case,
but we should use the cors-anywhere version,
since it's so much faster.

=======================================================
khyberS -- 2018-01-13 22:06:55

Now all the Google image URLs are tried until one works,
because a few of them are corrupt URLs and don't display.

=======================================================
